avrdude: Version 6.3-20201216
         Copyright (c) 2000-2005 Brian Dean, http://www.bdmicro.com/
         Copyright (c) 2007-2014 Joerg Wunsch

         System wide configuration file is "/Users/panziyue/Library/Arduino15/packages/MegaCoreX/hardware/megaavr/1.0.8/avrdude.conf"
         User configuration file is "/Users/panziyue/.avrduderc"
         User configuration file does not exist or is not a regular file, skipping

         Using Port                    : /dev/cu.usbmodem14101
         Using Programmer              : jtag2updi
avrdude: jtagmkII_open_pdi()
avrdude: jtagmkII_getsync()
avrdude: jtagmkII_getsync(): Sending sign-on command: 
avrdude: jtagmkII_send(): sending 1 bytes
avrdude: Send: . [1b] . [00] . [00] . [01] . [00] . [00] . [00] . [0e] . [01] . [f3] . [97] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [1d] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [86] . [01] . [01] . [07] . [01] . [01] . [01] . [07] . [06] . [01] . [00] . [00] . [00] . [00] . [00] . [00] J [4a] T [54] A [41] G [47] I [49] C [43] E [45]   [20] m [6d] k [6b] I [49] I [49] . [00] 
avrdude: Recv: o [6f] 
avrdude: Recv: V [56] 

avrdude: jtagmkII_recv(): Got message seqno 0 (command_sequence == 0)
avrdude: Recv: . [86] . [01] . [01] . [07] . [01] . [01] . [01] . [07] . [06] . [01] . [00] . [00] . [00] . [00] . [00] . [00] J [4a] T [54] A [41] G [47] I [49] C [43] E [45]   [20] m [6d] k [6b] I [49] I [49] . [00] 

Raw message:
0x86 0x01 0x01 0x07 0x01 0x01 0x01 0x07 0x06 0x01 0x00 0x00 0x00 0x00 0x00 0x00
0x4a 0x54 0x41 0x47 0x49 0x43 0x45 0x20 0x6d 0x6b 0x49 0x49 0x00 
Sign-on succeeded

JTAG ICE mkII sign-on message:
Communications protocol version: 1
M_MCU:
  boot-loader FW version:        1
  firmware version:              1.07
  hardware version:              1
S_MCU:
  boot-loader FW version:        1
  firmware version:              6.07
  hardware version:              1
Serial number:                   00:00:00:00:00:00
Device ID:                       JTAGICE mkII
avrdude: jtagmkII_getsync(): Using a 298-byte device descriptor
avrdude: jtagmkII_setparm()
avrdude: jtagmkII_setparm(): Sending set parameter command (parm 0x03, 1 bytes): 
avrdude: jtagmkII_send(): sending 3 bytes
avrdude: Send: . [1b] . [01] . [00] . [03] . [00] . [00] . [00] . [0e] . [02] . [03] . [06] $ [24] 1 [31] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [cd] 
avrdude: Recv: . [83] 

avrdude: jtagmkII_recv(): Got message seqno 1 (command_sequence == 1)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_getsync(): Sending get sync command: 
avrdude: jtagmkII_send(): sending 1 bytes
avrdude: Send: . [1b] . [02] . [00] . [01] . [00] . [00] . [00] . [0e] . [0f] . [e2] u [75] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [02] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [1d] 
avrdude: Recv: . [09] 

avrdude: jtagmkII_recv(): Got message seqno 2 (command_sequence == 2)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

         AVR Part                      : ATmega4809
         Chip Erase delay              : 0 us
         PAGEL                         : P00
         BS2                           : P00
         RESET disposition             : dedicated
         RETRY pulse                   : SCK
         serial program mode           : yes
         parallel program mode         : yes
         Timeout                       : 0
         StabDelay                     : 0
         CmdexeDelay                   : 0
         SyncLoops                     : 0
         ByteDelay                     : 0
         PollIndex                     : 0
         PollValue                     : 0x00
         Memory Detail                 :

                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           signature      0     0     0    0 no          3    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           prodsig        0     0     0    0 no         61   61      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           fuses          0     0     0    0 no          9    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           fuse0          0     0     0    0 no          1    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           fuse1          0     0     0    0 no          1    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           fuse2          0     0     0    0 no          1    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           fuse4          0     0     0    0 no          1    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           fuse5          0     0     0    0 no          1    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           fuse6          0     0     0    0 no          1    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           fuse7          0     0     0    0 no          1    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           fuse8          0     0     0    0 no          1    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           lock           0     0     0    0 no          1    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           data           0     0     0    0 no          0    0      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           usersig        0     0     0    0 no         64   64      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           flash          0     0     0    0 no      49152  128      0     0     0 0x00 0x00
                                  Block Poll               Page                       Polled
           Memory Type Mode Delay Size  Indx Paged  Size   Size #Pages MinW  MaxW   ReadBack
           ----------- ---- ----- ----- ---- ------ ------ ---- ------ ----- ----- ---------
           eeprom         0     0     0    0 no        256   64      0     0     0 0x00 0x00

         Programmer Type : JTAGMKII_PDI
         Description     : JTAGv2 to UPDI bridge
avrdude: jtagmkII_getparm()
avrdude: jtagmkII_getparm(): Sending get parameter command (parm 0x01): 
avrdude: jtagmkII_send(): sending 2 bytes
avrdude: Send: . [1b] . [03] . [00] . [02] . [00] . [00] . [00] . [0e] . [03] . [01] . [d3] . [99] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [03] 
avrdude: Recv: . [00] 
avrdude: Recv: . [03] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [81] . [01] . [01] 
avrdude: Recv: . [ed] 
avrdude: Recv: . [cd] 

avrdude: jtagmkII_recv(): Got message seqno 3 (command_sequence == 3)
avrdude: Recv: . [81] . [01] . [01] 

Raw message:
0x81 0x01 0x01 
parameter values:
0x01  0x01  

avrdude: jtagmkII_getparm()
avrdude: jtagmkII_getparm(): Sending get parameter command (parm 0x02): 
avrdude: jtagmkII_send(): sending 2 bytes
avrdude: Send: . [1b] . [04] . [00] . [02] . [00] . [00] . [00] . [0e] . [03] . [02] . [aa] B [42] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [04] 
avrdude: Recv: . [00] 
avrdude: Recv: . [05] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [81] . [07] . [01] . [07] . [06] 
avrdude: Recv: . [e6] 
avrdude: Recv: M [4d] 

avrdude: jtagmkII_recv(): Got message seqno 4 (command_sequence == 4)
avrdude: Recv: . [81] . [07] . [01] . [07] . [06] 

Raw message:
0x81 0x07 0x01 0x07 0x06 
parameter values:
0x07  0x01  0x07  0x06  

         M_MCU hardware version: 1
         M_MCU firmware version: 1.07
         S_MCU hardware version: 1
         S_MCU firmware version: 6.07
         Serial number:          00:00:00:00:00:00
avrdude: jtagmkII_getparm()
avrdude: jtagmkII_getparm(): Sending get parameter command (parm 0x06): 
avrdude: jtagmkII_send(): sending 2 bytes
avrdude: Send: . [1b] . [05] . [00] . [02] . [00] . [00] . [00] . [0e] . [03] . [06] s [73] I [49] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [05] 
avrdude: Recv: . [00] 
avrdude: Recv: . [03] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [81] . [88] . [13] 
avrdude: Recv: x [78] 
avrdude: Recv: M [4d] 

avrdude: jtagmkII_recv(): Got message seqno 5 (command_sequence == 5)
avrdude: Recv: . [81] . [88] . [13] 

Raw message:
0x81 0x88 0x13 
parameter values:
0x88  0x13  

         Vtarget         : 5.0 V
avrdude: jtagmkII_initialize(): trying to set baudrate to 115200
avrdude: jtagmkII_setparm()
avrdude: jtagmkII_setparm(): Sending set parameter command (parm 0x05, 1 bytes): 
avrdude: jtagmkII_send(): sending 3 bytes
avrdude: Send: . [1b] . [06] . [00] . [03] . [00] . [00] . [00] . [0e] . [02] . [05] . [07] . [88] . [b0] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [06] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [c3] 
avrdude: Recv: . [1f] 

avrdude: jtagmkII_recv(): Got message seqno 6 (command_sequence == 6)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_set_devdescr(): Sending set device descriptor command: 
avrdude: jtagmkII_send(): sending 299 bytes
avrdude: Send: . [1b] . [07] . [00] + [2b] . [01] . [00] . [00] . [0e] . [0cc0] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [80] . [01] . [00] . [00] . [00] . [00] . [00] . [01] . [02] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [00] . [e8] . [c8] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [07] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: | [7c] 
avrdude: Recv: . [9e] 

avrdude: jtagmkII_recv(): Got message seqno 7 (command_sequence == 7)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_initialize(): Cannot locate "flash" and "boot" memories in description
avrdude: jtagmkII_reset(): Sending reset command: 
avrdude: jtagmkII_send(): sending 2 bytes
avrdude: Send: . [1b] . [08] . [00] . [02] . [00] . [00] . [00] . [0e] . [0b] . [01] . [de] . [fe] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [08] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [ce] 
avrdude: Recv: / [2f] 

avrdude: jtagmkII_recv(): Got message seqno 8 (command_sequence == 8)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_read_byte(.., signature, 0x0, ...)
avrdude: jtagmkII_program_enable(): Sending enter progmode command: 
avrdude: jtagmkII_send(): sending 1 bytes
avrdude: Send: . [1b] . [09] . [00] . [01] . [00] . [00] . [00] . [0e] . [14] . [dc] | [7c] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [09] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: q [71] 
avrdude: Recv: . [ae] 

avrdude: jtagmkII_recv(): Got message seqno 9 (command_sequence == 9)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_program_enable(): Sending enter progmode command: 
avrdude: jtagmkII_send(): sending 1 bytes
avrdude: Send: . [1b] . [0a] . [00] . [01] . [00] . [00] . [00] . [0e] . [14] . [0c] . [f6] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [0a] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [a1] 
avrdude: Recv: $ [24] 

avrdude: jtagmkII_recv(): Got message seqno 10 (command_sequence == 10)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_read_byte(): Sending read memory command: 
avrdude: jtagmkII_send(): sending 10 bytes
avrdude: Send: . [1b] . [0b] . [00] . [0a] . [00] . [00] . [00] . [0e] . [05] . [b4] . [01] . [00] . [00] . [00] . [00] . [11] . [00] . [00] . [1a] . [d4] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [0b] 
avrdude: Recv: . [00] 
avrdude: Recv: . [02] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [82] . [1e] 
avrdude: Recv: { [7b] 
avrdude: Recv: . [9b] 

avrdude: jtagmkII_recv(): Got message seqno 11 (command_sequence == 11)
avrdude: Recv: . [82] . [1e] 

Raw message:
0x82 0x1e 
memory contents:
0x1e  

avrdude: jtagmkII_read_byte(.., signature, 0x1, ...)
avrdude: jtagmkII_read_byte(): Sending read memory command: 
avrdude: jtagmkII_send(): sending 10 bytes
avrdude: Send: . [1b] . [0c] . [00] . [0a] . [00] . [00] . [00] . [0e] . [05] . [b4] . [01] . [00] . [00] . [00] . [01] . [11] . [00] . [00] . [8c] . [b8] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [0c] 
avrdude: Recv: . [00] 
avrdude: Recv: . [02] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [82] . [96] 
avrdude: Recv: . [d9] 
avrdude: Recv: z [7a] 

avrdude: jtagmkII_recv(): Got message seqno 12 (command_sequence == 12)
avrdude: Recv: . [82] . [96] 

Raw message:
0x82 0x96 
memory contents:
0x96  

avrdude: jtagmkII_read_byte(.., signature, 0x2, ...)
avrdude: jtagmkII_read_byte(): Sending read memory command: 
avrdude: jtagmkII_send(): sending 10 bytes
avrdude: Send: . [1b] . [0d] . [00] . [0a] . [00] . [00] . [00] . [0e] . [05] . [b4] . [01] . [00] . [00] . [00] . [02] . [11] . [00] . [00] N [4e] . [8d] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [0d] 
avrdude: Recv: . [00] 
avrdude: Recv: . [02] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [82] Q [51] 
avrdude: Recv: . [97] 
avrdude: Recv: . [85] 

avrdude: jtagmkII_recv(): Got message seqno 13 (command_sequence == 13)
avrdude: Recv: . [82] Q [51] 

Raw message:
0x82 0x51 
memory contents:
0x51  

avrdude: jtagmkII_chip_erase(): Sending Xmega chip erase command: 
avrdude: jtagmkII_send(): sending 6 bytes
avrdude: Send: . [1b] . [0e] . [00] . [06] . [00] . [00] . [00] . [0e] 4 [34] . [00] . [00] . [00] . [00] . [00] . [b3] x [78] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [7f] 
avrdude: Recv: 2 [32] 

avrdude: jtagmkII_recv(): Got message seqno 14 (command_sequence == 14)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 0 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [0f] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [00] @ [40] . [00] . [00] . [0c] . [94] P [50] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] r [72] e [65] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [0f] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [c0] 
avrdude: Recv: . [b3] 

avrdude: jtagmkII_recv(): Got message seqno 15 (command_sequence == 15)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 128 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [10] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [80] @ [40] . [00] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] + [2b] . [01] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [0c] . [94] b [62] . [00] . [11] $ [24] . [1f] . [be] . [cf] . [ef] . [cd] . [bf] . [df] . [e3] . [de] . [bf] ( [28] . [e2] . [a0] . [e0] . [b8] . [e2] . [01] . [c0] . [1d] . [92] . [a4] 0 [30] . [b2] . [07] . [e1] . [f7] . [0e] . [94] S [53] . [01] . [0c] . [94] . [ff] . [01] . [0c] . [94] . [00] . [00] . [90] . [e0] . [fc] . [01] . [e3] X [58] . [fb] K [4b]   [20] . [81] / [2f] ? [3f] Q [51] . [f0] . [8c] Z [5a] . [9b] K [4b] . [dc] . [01] . [ec] . [91] . [b0] . [e2] . [eb] . [9f] . [f0] . [01] . [11] $ [24] . [fc] _ [5f] ! [21] . [83] . [08] . [95] . [90] . [e0] . [fc] . [01] . [e3] X [58] . [fb] K [4b] @ [40] . [81] O [4f] ? [3f] . [09] . [f4] N [4e] . [c0] . [fc] . [01] . [ee] _ [5f] . [8e] [ [5b] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [10] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [0a] 
avrdude: Recv: Y [59] 

avrdude: jtagmkII_recv(): Got message seqno 16 (command_sequence == 16)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 256 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [11] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [00] A [41] . [00] . [00] . [fb] K [4b] . [e0] . [81] . [ee] # [23] ) [29] . [f0] . [e1] 0 [30] . [99] . [f0] . [10] . [f0] . [e6] 0 [30]   [20] . [f1] . [fc] . [01] . [ec] Z [5a] . [fb] K [4b] . [e0] . [81] . [a0] . [e2] . [ea] . [9f] . [f0] . [01] . [11] $ [24] . [fc] _ [5f]   [20] . [81] $ [24] # [23] ! [21] . [f1] a [61] . [11]   [20] . [c0] F [46] . [83] . [08] . [95] . [fc] . [01] . [e5] ] [5d] . [fb] K [4b] P [50] . [81] S [53] 0 [30] . [08] . [f0] _ [5f] _ [5f] p [70] . [91] . [01] . [0a] ! [21] . [e0] 0 [30] . [e0] . [01] . [c0] " [22] . [0f] Z [5a] . [95] . [ea] . [f7]   [20] . [95] ' [27] # [23]   [20] . [93] . [01] . [0a] . [dc] . [cf]   [20] . [e1] . [e2] . [9f] . [f0] . [01] . [11] $ [24] . [e0] Z [5a] . [f5] O [4f] ! [21] . [81] / [2f] ~ [7e] ! [21] . [83] . [d2] . [cf] E [45] . [83] . [08] . [95] . [85] ] [5d] . [9b] K [4b] . [dc] . [01] . [8c] . [91] 0 [30] . [97] q [71] . [f0] . [8f] ? [3f] . [f3] - [2d] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [11] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [b5] 
avrdude: Recv: . [d8] 

avrdude: jtagmkII_recv(): Got message seqno 17 (command_sequence == 17)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 384 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [12] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [80] A [41] . [00] . [00] a [61] . [f0] p [70] . [96] . [e8] . [0f] . [f1] . [1d] . [9f] . [b7] . [f8] . [94] . [80] . [81] a [61] . [11] . [07] . [c0] . [87] . [7f] . [80] . [83] . [9f] . [bf] . [08] . [95] . [f0] . [e0] . [e0] . [e0] . [f4] . [cf] . [88] ` [60] . [f8] . [cf] . [8f] . [b7] . [f8] . [94]   [20] . [91] . [00] ( [28] 0 [30] . [91] . [01] ( [28] @ [40] . [91] . [02] ( [28] P [50] . [91] . [03] ( [28] . [e0] . [91] . [ba] . [0a] . [f0] . [91] . [bb] . [0a] . [90] . [91] . [b6] . [0a] . [90] . [ff] . [08] . [c0] / [2f] _ [5f] ? [3f] O [4f] O [4f] O [4f] _ [5f] O [4f] . [e0] . [91] . [ba] . [0a] . [f0] . [91] . [bb] . [0a] . [8f] . [bf] . [a8] . [ee] . [b3] . [e0] . [0e] . [94] . [e5] . [01] $ [24] . [e0] . [f6] . [95] . [e7] . [95] * [2a] . [95] . [e1] . [f7] n [6e] . [0f] . [7f] . [1f] . [81] . [1d] . [91] . [1d] . [08] . [95] . [8f] . [92] . [9f] . [92] . [af] . [92] . [bf] . [92] . [cf] . [92] . [ef] . [c2] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [12] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: e [65] 
avrdude: Recv: R [52] 

avrdude: jtagmkII_recv(): Got message seqno 18 (command_sequence == 18)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 512 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [13] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [00] B [42] . [00] . [00] . [df] . [92] . [ef] . [92] . [ff] . [92] K [4b] . [01] \ [5c] . [01] . [0e] . [94] . [d2] . [00] k [6b] . [01] | [7c] . [01] . [a8] . [ee] . [b3] . [e0] . [a5] . [01] . [94] . [01] . [0e] . [94] . [e5] . [01] . [c6] . [0e] . [d7] . [1e] . [e8] . [1e] . [f9] . [1e] . [c6] . [16] . [d7] . [06] . [e8] . [06] . [f9] . [06] . [18] . [f4] . [0e] . [94] . [d2] . [00] . [f8] . [cf] . [0e] . [94] . [d2] . [00] l [6c] . [15] } [7d] . [05] . [8e] . [05] . [9f] . [05] . [c8] . [f3] . [ff] . [90] . [ef] . [90] . [df] . [90] . [cf] . [90] . [bf] . [90] . [af] . [90] . [9f] . [90] . [8f] . [90] . [08] . [95] . [1f] . [92] . [0f] . [92] . [0f] . [b6] . [0f] . [92] . [11] $ [24] . [8f] . [93] . [9f] . [93] . [af] . [93] . [bf] . [93] . [80] . [91] . [00] ( [28] . [90] . [91] . [01] ( [28] . [a0] . [91] . [02] ( [28] . [b0] . [91] . [03] ( [28] . [01] . [96] . [a1] . [1d] . [b1] . [1d] . [80] . [93] \ [5c] 1 [31] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [13] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [da] 
avrdude: Recv: . [d3] 

avrdude: jtagmkII_recv(): Got message seqno 19 (command_sequence == 19)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 640 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [14] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [80] B [42] . [00] . [00] . [00] ( [28] . [90] . [93] . [01] ( [28] . [a0] . [93] . [02] ( [28] . [b0] . [93] . [03] ( [28] . [81] . [e0] . [80] . [93] . [b6] . [0a] . [bf] . [91] . [af] . [91] . [9f] . [91] . [8f] . [91] . [0f] . [90] . [0f] . [be] . [0f] . [90] . [1f] . [90] . [18] . [95] . [88] . [ed] . [90] . [e0] . [84] . [bf] . [90] . [93] a [61] . [00] . [80] . [91] . [02] . [06] . [86] ` [60] . [80] . [93] . [02] . [06] . [80] . [91] . [00] . [06] . [81] ` [60] . [80] . [93] . [00] . [06] . [80] . [91] . [02] . [06] . [8f] | [7c] . [80] e [65] . [80] . [93] . [02] . [06] . [10] . [92] . [e2] . [05] . [81] . [e0] . [80] . [93] . [e4] . [05] . [80] . [93] . [03] . [0a] . [8e] . [ef] . [80] . [93] ' [27] . [0a] . [80] . [93] & [26] . [0a] . [80] . [e8] . [80] . [93] - [2d] . [0a] . [80] . [93] + [2b] . [0a] . [80] . [93] ) [29] . [0a] . [80] . [93] , [2c] . [0a] . [80] . [93] * [2a] . [0a] . [80] . [93] q [71] . [cd] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [14] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [d4] 
avrdude: Recv: O [4f] 

avrdude: jtagmkII_recv(): Got message seqno 20 (command_sequence == 20)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 768 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [15] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [00] C [43] . [00] . [00] ( [28] . [0a] . [8b] . [e0] . [80] . [93] . [00] . [0a] . [87] . [e0] . [80] . [93] . [e5] . [05] . [e0] . [e8] . [fa] . [e0] 7 [37] . [e0] . [2e] . [ef] . [90] . [e8] . [85] . [e0] 1 [31] . [83] $ [24] . [87] . [95] . [87] . [80] . [83] p [70] . [96] . [e0] < [3c] J [4a] . [e0] . [f4] . [07] . [b9] . [f7] . [10] . [92] . [b1] . [0a] . [8f] . [e7] . [9e] . [e3] . [80] . [93] . [bc] . [0a] . [90] . [93] . [bd] . [0a] . [80] . [91] . [b5] . [0a] . [81] ` [60] . [80] . [93] . [b5] . [0a] . [10] . [92] . [b0] . [0a] . [80] . [91] . [b0] . [0a] . [81] ` [60] . [80] . [93] . [b0] . [0a] x [78] . [94] . [8c] . [e1] . [0e] . [94] d [64] . [00] a [61] . [e0] . [8c] . [e1] . [0e] . [94] v [76] . [00] . [8d] . [e1] . [0e] . [94] d [64] . [00] a [61] . [e0] . [8d] . [e1] . [0e] . [94] v [76] . [00] . [83] . [e2] . [0e] . [94] d [64] . [00] a [61] . [e0] . [83] . [e2] . [0e] . [94] v [76] . [00] f [66] p [70] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [15] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: k [6b] 
avrdude: Recv: . [ce] 

avrdude: jtagmkII_recv(): Got message seqno 21 (command_sequence == 21)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 896 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [16] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [80] C [43] . [00] . [00] . [8e] . [e1] . [0e] . [94] d [64] . [00] a [61] . [e0] . [8e] . [e1] . [0e] . [94] v [76] . [00] . [89] . [e1] . [0e] . [94] d [64] . [00] . [c0] . [e0] . [d0] . [e0] a [61] . [e0] . [89] . [e1] . [0e] . [94] v [76] . [00] b [62] . [e3] p [70] . [e0] . [80] . [e0] . [90] . [e0] . [0e] . [94] . [fb] . [00] ` [60] . [e0] . [89] . [e1] . [0e] . [94] v [76] . [00] f [66] . [eb] s [73] . [e0] . [80] . [e0] . [90] . [e0] . [0e] . [94] . [fb] . [00]   [20] . [97] Q [51] . [f3] . [0e] . [94] . [00] . [00] . [e7] . [cf] . [0e] . [94] . [f0] . [01] . [a5] . [9f] . [90] . [0d] . [b4] . [9f] . [90] . [0d] . [a4] . [9f] . [80] . [0d] . [91] . [1d] . [11] $ [24] . [08] . [95] . [a2] . [9f] . [b0] . [01] . [b3] . [9f] . [c0] . [01] . [a3] . [9f] p [70] . [0d] . [81] . [1d] . [11] $ [24] . [91] . [1d] . [b2] . [9f] p [70] . [0d] . [81] . [1d] . [11] $ [24] . [91] . [1d] . [08] . [95] . [f8] . [94] . [91] . [df] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [16] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [bb] 
avrdude: Recv: D [44] 

avrdude: jtagmkII_recv(): Got message seqno 22 (command_sequence == 22)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 1024 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [17] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [00] D [44] . [00] . [00] . [ff] . [cfa] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [17] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [04] 
avrdude: Recv: . [c5] 

avrdude: jtagmkII_recv(): Got message seqno 23 (command_sequence == 23)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_paged_write(.., flash, 128, 128)
avrdude: jtagmkII_paged_write(): block_size at addr 1152 is 128
avrdude: jtagmkII_paged_write(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 138 bytes
avrdude: Send: . [1b] . [18] . [00] . [8a] . [00] . [00] . [00] . [0e] . [04] . [c0] . [80] . [00] . [00] . [00] . [80] D [44] . [00] . [00]   [20] @ [40] . [04] . [10] . [02] . [08] . [01] . [02] . [01] . [02] . [04] . [01] . [02] . [04] . [08] . [10]   [20] . [04] . [08] . [08]   [20] . [10] @ [40]   [20] . [10] @ [40] . [80] . [08] . [80] . [01] . [02] . [04] . [04] . [08] . [01] . [02] . [80] @ [40] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] . [ff] j [6a] 7 [37] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [18] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [b6] 
avrdude: Recv: t [74] 

avrdude: jtagmkII_recv(): Got message seqno 24 (command_sequence == 24)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_write_byte(.., fuse0, 0x0, ...)
avrdude: jtagmkII_write_byte(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 11 bytes
avrdude: Send: . [1b] . [19] . [00] . [0b] . [00] . [00] . [00] . [0e] . [04] . [b2] . [01] . [00] . [00] . [00] . [80] . [12] . [00] . [00] . [00] . [94] , [2c] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [19] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [09] 
avrdude: Recv: . [f5] 

avrdude: jtagmkII_recv(): Got message seqno 25 (command_sequence == 25)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_write_byte(.., fuse1, 0x0, ...)
avrdude: jtagmkII_write_byte(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 11 bytes
avrdude: Send: . [1b] . [1a] . [00] . [0b] . [00] . [00] . [00] . [0e] . [04] . [b2] . [01] . [00] . [00] . [00] . [81] . [12] . [00] . [00] T [54] I [49] 2 [32] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [1a] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [d9] 
avrdude: Recv: . [7f] 

avrdude: jtagmkII_recv(): Got message seqno 26 (command_sequence == 26)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_write_byte(.., fuse2, 0x0, ...)
avrdude: jtagmkII_write_byte(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 11 bytes
avrdude: Send: . [1b] . [1b] . [00] . [0b] . [00] . [00] . [00] . [0e] . [04] . [b2] . [01] . [00] . [00] . [00] . [82] . [12] . [00] . [00] . [01] J [4a] . [d2] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [1b] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: f [66] 
avrdude: Recv: . [fe] 

avrdude: jtagmkII_recv(): Got message seqno 27 (command_sequence == 27)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_write_byte(.., fuse4, 0x0, ...)
avrdude: jtagmkII_write_byte(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 11 bytes
avrdude: Send: . [1b] . [1c] . [00] . [0b] . [00] . [00] . [00] . [0e] . [04] . [b2] . [01] . [00] . [00] . [00] . [84] . [12] . [00] . [00] . [00] . [cc] . [02] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [1c] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: h [68] 
avrdude: Recv: b [62] 

avrdude: jtagmkII_recv(): Got message seqno 28 (command_sequence == 28)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_write_byte(.., fuse5, 0x0, ...)
avrdude: jtagmkII_write_byte(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 11 bytes
avrdude: Send: . [1b] . [1d] . [00] . [0b] . [00] . [00] . [00] . [0e] . [04] . [b2] . [01] . [00] . [00] . [00] . [85] . [12] . [00] . [00] . [c9] . [a2] . [aa] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [1d] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [d7] 
avrdude: Recv: . [e3] 

avrdude: jtagmkII_recv(): Got message seqno 29 (command_sequence == 29)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_write_byte(.., fuse6, 0x0, ...)
avrdude: jtagmkII_write_byte(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 11 bytes
avrdude: Send: . [1b] . [1e] . [00] . [0b] . [00] . [00] . [00] . [0e] . [04] . [b2] . [01] . [00] . [00] . [00] . [86] . [12] . [00] . [00] . [06] . [ad] . [88] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [1e] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [07] 
avrdude: Recv: i [69] 

avrdude: jtagmkII_recv(): Got message seqno 30 (command_sequence == 30)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_write_byte(.., fuse7, 0x0, ...)
avrdude: jtagmkII_write_byte(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 11 bytes
avrdude: Send: . [1b] . [1f] . [00] . [0b] . [00] . [00] . [00] . [0e] . [04] . [b2] . [01] . [00] . [00] . [00] . [87] . [12] . [00] . [00] . [00] 8 [38] . [1e] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: . [1f] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [b8] 
avrdude: Recv: . [e8] 

avrdude: jtagmkII_recv(): Got message seqno 31 (command_sequence == 31)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_write_byte(.., fuse8, 0x0, ...)
avrdude: jtagmkII_write_byte(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 11 bytes
avrdude: Send: . [1b]   [20] . [00] . [0b] . [00] . [00] . [00] . [0e] . [04] . [b2] . [01] . [00] . [00] . [00] . [88] . [12] . [00] . [00] . [00] . [9c] b [62] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv:   [20] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [82] 
avrdude: Recv: . [b4] 

avrdude: jtagmkII_recv(): Got message seqno 32 (command_sequence == 32)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_write_byte(.., lock, 0x0, ...)
avrdude: jtagmkII_write_byte(): Sending write memory command: 
avrdude: jtagmkII_send(): sending 11 bytes
avrdude: Send: . [1b] ! [21] . [00] . [0b] . [00] . [00] . [00] . [0e] . [04] . [b3] . [01] . [00] . [00] . [00] . [8a] . [12] . [00] . [00] . [c5] u [75] 1 [31] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: ! [21] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: = [3d] 
avrdude: Recv: 5 [35] 

avrdude: jtagmkII_recv(): Got message seqno 33 (command_sequence == 33)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_program_disable(): Sending leave progmode command: 
avrdude: jtagmkII_send(): sending 1 bytes
avrdude: Send: . [1b] " [22] . [00] . [01] . [00] . [00] . [00] . [0e] . [15] . [c9] | [7c] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: " [22] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [ed] 
avrdude: Recv: . [bf] 

avrdude: jtagmkII_recv(): Got message seqno 34 (command_sequence == 34)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_reset(): Sending reset command: 
avrdude: jtagmkII_send(): sending 2 bytes
avrdude: Send: . [1b] # [23] . [00] . [02] . [00] . [00] . [00] . [0e] . [0b] . [01] * [2a] . [a0] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: # [23] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: R [52] 
avrdude: Recv: > [3e] 

avrdude: jtagmkII_recv(): Got message seqno 35 (command_sequence == 35)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_close()
avrdude: jtagmkII_close(): Sending GO command: 
avrdude: jtagmkII_send(): sending 1 bytes
avrdude: Send: . [1b] $ [24] . [00] . [01] . [00] . [00] . [00] . [0e] . [08] . [1c] . [aa] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: $ [24] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: \ [5c] 
avrdude: Recv: . [a2] 

avrdude: jtagmkII_recv(): Got message seqno 36 (command_sequence == 36)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK

avrdude: jtagmkII_close(): Sending sign-off command: 
avrdude: jtagmkII_send(): sending 1 bytes
avrdude: Send: . [1b] % [25] . [00] . [01] . [00] . [00] . [00] . [0e] . [00] . [eb] . [a7] 
avrdude: jtagmkII_recv():
avrdude: Recv: . [1b] 
avrdude: Recv: % [25] 
avrdude: Recv: . [00] 
avrdude: Recv: . [01] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [00] 
avrdude: Recv: . [0e] 
avrdude: Recv: . [80] 
avrdude: Recv: . [e3] 
avrdude: Recv: # [23] 

avrdude: jtagmkII_recv(): Got message seqno 37 (command_sequence == 37)
avrdude: Recv: . [80] 

Raw message:
0x80 
OK
